package com.infore.csep.restful.ctrl;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.infore.csep.common.service.IGpssewaService;
import com.infore.csep.common.service.IGpssewahisdayService;
import com.infore.csep.common.service.IGpssewahishourService;
import com.infore.csep.pojo.entity.Factsewa;
import com.infore.csep.pojo.entity.Gpssewa;
import com.infore.csep.pojo.entity.Gpssewahisday;
import com.infore.csep.pojo.entity.Gpssewahishour;
import com.infore.csep.restful.VO.HisReqVO;
import com.infore.csep.restful.VO.RealTimeReqVO;
import com.infore.csep.restful.VO.ResultVO;
import com.infore.csep.restful.utils.BeginEndTimeUtil;
import com.infore.csep.restful.utils.CheckParamUtil;
import com.infore.csep.restful.utils.ResultVOUtil;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;

/**
 * 厂站数据请求接口
 * Created by steven ma
 * 2018/4/28 16:39
 */

@RestController
@RequestMapping("/gpssewa")
@Slf4j
public class GpsSewaCtrl {

    @Autowired
    private IGpssewaService gpssewaService;

    @Autowired
    private IGpssewahishourService gpssewahishourService;

    @Autowired
    private IGpssewahisdayService gpssewahisdayService;

    /**
     * 查询实时状态 TODO:暂时放在这里，后面放service
     * @param factNum 厂站编码
     * @param equmNum 设备编码
     * @return
     */
    public Gpssewa findByFactNumAndEqumNum(String factNum, String equmNum){

        Wrapper<Gpssewa> wrapper = new EntityWrapper<>();
        wrapper.eq("factNum", factNum)  //TODO: 表还是int类型，后续考虑统一
                .eq("equmNum", equmNum);

        Gpssewa realTimeRec = gpssewaService.selectOne(wrapper);

        return realTimeRec;
    }



    /**
     * 工况实时数据查询
     * @return
     */
    @RequestMapping("realtime")
    public ResultVO realtime(@RequestBody @Valid RealTimeReqVO reqVO, BindingResult br) {

        //参数合法性较验
        log.debug("request: {}", reqVO);
        CheckParamUtil.check(br);

        Gpssewa realTimeRec= findByFactNumAndEqumNum(reqVO.getFactNum(), reqVO.getEqumNum());
        log.debug("date: {}", DateFormatUtils.format(realTimeRec.getRevTime(), "yyyy-MM-dd HH:mm:ss"));

        return ResultVOUtil.success(realTimeRec);
    }

    /**
     * 工况历史数据(小时)
     * @param reqVO
     * @param br
     * @return
     */
    @RequestMapping("hour")
    public ResultVO hisHour(@RequestBody @Valid HisReqVO reqVO, BindingResult br) {
        //参数合法性较验
        log.debug("request: {}", reqVO);
        CheckParamUtil.check(br);


        BeginEndTimeUtil beginEndTime =  BeginEndTimeUtil.getDate(reqVO.getBeginTime(), reqVO.getEndTime());


        List<Gpssewahishour> hisDatas =
                gpssewahishourService.findByFactNumAndEqumNum(
                        reqVO.getFactNum(),
                        reqVO.getEqumNum(),
                        beginEndTime.getBeginTime(),
                        beginEndTime.getEndTime());

        return ResultVOUtil.success(hisDatas);
    }

    /**
     * 工况历史数据(天)
     * @param reqVO
     * @param br
     * @return
     */
    @RequestMapping("day")
    public ResultVO hisDay(@RequestBody @Valid HisReqVO reqVO, BindingResult br) {
        //参数合法性较验
        log.debug("request: {}", reqVO);
        CheckParamUtil.check(br);


        BeginEndTimeUtil beginEndTime =  BeginEndTimeUtil.getDate(reqVO.getBeginTime(), reqVO.getEndTime());


        List<Gpssewahisday> hisDatas =
                gpssewahisdayService.findByFactNumAndEqumNum(
                        reqVO.getFactNum(),
                        reqVO.getEqumNum(),
                        beginEndTime.getBeginTime(),
                        beginEndTime.getEndTime());

        return ResultVOUtil.success(hisDatas);
    }

    @RequestMapping("month")
    public ResultVO hisMonth(@RequestBody @Valid HisReqVO reqVO, BindingResult br) {
        //TODO: 还没实现，暂时用日表代替接口
        return hisDay(reqVO, br);
    }

    @RequestMapping("year")
    public ResultVO hisYear(@RequestBody @Valid HisReqVO reqVO, BindingResult br) {
        //TODO: 还没实现，暂时用日表代替接口
        return hisDay(reqVO, br);
    }

}
